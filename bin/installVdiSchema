#!/usr/bin/perl

use strict;
use FindBin;
use lib "$FindBin::Bin/../lib/perl";
use Getopt::Long;
use InstallSchemaUtils qw( runSql dropSchemaSetTables dropSchemaSetPostgres getDbh ); # do not use $GUS_HOME
use DBI;
use Cwd;

$| = 1;

my @envVars = ('DB_PLATFORM', 'DB_USER', 'DB_PASS');
my $envStr = '$' . join(", \$", @envVars);
my ($dbName, $dbHost, $drop, $create, $lifecycle, $campus, $allowFailures);

&GetOptions("dbName=s" => \$dbName,
	    "dbHost=s" => \$dbHost,
	    "allowFailures!" => \$allowFailures,
	    "create!" => \$create,
	    "drop!" => \$drop,
	    "lifecycle=s" => \$lifecycle,
	    "campus=s" => \$campus);

my @lifecycle = ('dev', 'qa', 'feat', 'beta', 'prod');
my $lcStr = join(", ", @lifecycle);
if (($create + $drop != 1) || !( grep( /^$lifecycle$/, @lifecycle )) || ($campus ne 'n' && $campus ne 's')) {
  die "

Install the VDI control and dataset schemas, tables, etc, or uninstall them

In the case of Oracle, the schema/user is managed by DBA, so only the tables are managed here.
For Postgres, the schema and tables are both managed here.

Usage: installVdiSchema --dbName name --dbHost host [--create | --drop] --lifecycle --campus [--allowFailures]

Where:
  - dbName: database to connect to, eg, toxo-inc
  - dbHost: database server, eg, ares10.penn.apidb.org
  - create: creates the VDI schemas
  - drop: drops the VDI schemas
  - allowFailures: ignores SQL failures.
  - lifecycle is one of: $lcStr
  - campus is n or s

Caution: only use --allowFailures if you know what you are doing

Required environment variables: $envStr

Log is printed to STDERR

Include the following in your bash environment or on the command line preceding the command below:
export DB_PLATFORM=Oracle; export DB_USER=MY-LOGIN; export DB_PASS=MY-PASSWORD;

Example: ./installVdiSchema --dbName rm8711 --dbHost ares10.penn.apidb.org --create --lifecycle dev --campus n
";
}

for my $envVar (@envVars) { die "Missing env variable '$envVar'\n" unless $ENV{$envVar}; }

my $login = $ENV{DB_USER};
my $password = $ENV{DB_PASS};
my $dbVendor = $ENV{DB_PLATFORM};
die "DB Platform must be either 'Oracle' or 'Postgres'\n" unless ($dbVendor eq 'Oracle' || $dbVendor eq 'Postgres');

my $dbh = getDbh($dbName, $dbHost, $dbVendor, $login, $password);

my $schemaSuffix = uc("${lifecycle}_${campus}");
if ($drop) {
    print "\nYou are about to UNINSTALL the VDI_DATASETS_$schemaSuffix and VDI_CONTROL_$schemaSuffix schemas on database:\n  $dbName\nType the name of the database to confirm: ";
    my $confirm = <STDIN>;
    chomp $confirm;
    die "You did not correctly confirm the db instance\n" unless $dbName eq $confirm;
}

my @create = qw(
  createVdiControlTables.sql
  createUserDatasetTypeTables.sql
  createEntityGraphTables.sql
);

if ($create) {
  for my $sqlFile (@create) {
     print STDERR "\n==============================================================\n";
     print STDERR "running $sqlFile for $schemaSuffix\n";
     print STDERR "==============================================================\n";
     my @sqlplusParamValues = ($schemaSuffix);
     my $filePath = cwd() . "/../lib/sql/vdischema/$dbVendor/$sqlFile";
     runSql($login, $password, $dbh, $dbVendor, $filePath, $allowFailures, @sqlplusParamValues);
  }
} else {
  my @schemas = ("VDI_DATASETS_$schemaSuffix", "VDI_CONTROL_$schemaSuffix");
  if ($dbVendor eq 'Oracle') {
    my $schemaSetStr = join ', ', map "'$_'", @schemas;
    my $count = dropSchemaSetTables($dbh, $schemaSetStr);
    print STDERR "Dropped $count objects\n";
  } else {
    my $count = dropSchemaSetPostgres($dbh, @schemas);
    print STDERR "Dropped $count schemas\n";
  }
}

print STDERR "\nDone.\n";
